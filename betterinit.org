#+title: My Emacs Configuration
#+author: Matthew Julies

This file is part of GNU Emacs.

GNU Emacs is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

GNU Emacs is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with GNU Emacs.  If not, see <https://www.gnu.org/licenses/>.

* System Settings

** Custom.el
Where Emacs stores native settings, such as font settings or themes.

#+begin_src emacs-lisp
  (setq custom-file 
  	(expand-file-name "custom.el" user-emacs-directory))
  (when (file-exists-p custom-file)
	(load custom-file))
#+end_src

** Aesthetics
Various settings to make Emacs look a bit nicer.

#+begin_src emacs-lisp
  ;; Hide the startup page
  (setq inhibit-startup-message t)
  ;; Hide the bars
  (menu-bar-mode -1)
  (scroll-bar-mode -1)
  (tool-bar-mode -1)
  ;; Add thick line between split windows
  (setq window-divider-mode t)
  ;; Hide the modeline
  (add-hook 'emacs-startup-hook
  	(lambda ()
  		(with-current-buffer "*dashboard*"
  			(setq mode-line-format nil))))
  ;; Don't show a message in the minibuffer on startup 
  (defun display-startup-echo-area-message ()
  	(message nil))

#+end_src

** Change 'yes or now' to 'y or n' 
Some tasks require you to use 'yes' or 'no' instead of a single letter.

#+begin_src emacs-lisp
  (defalias 'yes-or-no-p 'y-or-n-p)
#+end_src

** Keymaps
Some custom keymaps to make life easier.

#+begin_src elisp
  (global-set-key (kbd "C-k") 'kill-this-buffer)
#+end_src

* System Editor Settings 

** Autopair
Automatically adds a closing parenthesis or quotation mark.

#+begin_src emacs-lisp
  (electric-pair-mode 1)
#+end_src

** Line Numbers
Shows line number when programming.

#+begin_src emacs-lisp
  (add-hook 'prog-mode-hook 'display-line-numbers-mode)
#+end_src

* 3rd-Party Packages

** Org
A package for notes.

#+begin_src emacs-lisp
  (use-package org :straight t)
  (setq org-hide-emphasis-markers t)
  (use-package org-bullets :straight t 
	:config
	(add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
#+end_src

** Helm
Emacs incremental completion and selection narrowing framework... It's completion for Emacs.

#+begin_src emacs-lisp
  (use-package helm :straight t
	:config
	(helm-mode 1)
	(global-set-key (kbd "M-x") 'helm-M-x)
  	(global-set-key (kbd "C-x C-f") 'helm-find-files))
#+end_src

** Doom Modeline
The best looking modeline for Emacs. Modeled after Atom's (Github's dead editor) modeline.

#+begin_src emacs-lisp
  (use-package doom-modeline :straight t)
  (doom-modeline-mode 1)
#+end_src

** All the icons
An icon font for Emacs. Used by Doom's packages.

#+begin_src emacs-lisp
  (use-package all-the-icons :straight t)
#+end_src

** Evil
Vi keybindings for Emacs. Save your pinky.

 #+begin_src emacs-lisp
  (use-package evil :straight t)
  (evil-mode 1)
 #+end_src

** Doom themes
A theme pack made for Doom Emacs.

#+begin_src emacs-lisp
  (use-package doom-themes :straight t)
  (load-theme 'doom-solarized-dark t)
#+end_src

** Vterm
Terminal emulator for Emacs.

#+begin_src emacs-lisp
  (use-package vterm :straight t)
#+end_src

** Center the cursor
Keeps the cursor in the center of the screen.

#+begin_src emacs-lisp
  (use-package centered-cursor-mode
    :straight t
    :config
    (global-centered-cursor-mode))
#+end_src

** Indentation Lines
Show a line character when indenting.

#+begin_src emacs-lisp
  (use-package highlight-indent-guides :straight t)
  (add-hook 'prog-mode-hook 'highlight-indent-guides-mode)
  (setq highlight-indent-guides-method 'character)
#+end_src

** Centaur Tabs
Tabs for Emacs.

#+begin_src emacs-lisp
  (use-package centaur-tabs :straight t)
  (centaur-tabs-mode 1)
  ;; Cycle through tabs with Emacs style keybindings
  (global-set-key (kbd "C-<prior>") 'centaur-tabs-backward)
  (global-set-key (kbd "C-<next>") 'centaur-tabs-forward)
  ;; Cycle through tabs with Vi style keybindings
  (define-key evil-normal-state-map (kbd "g T") 'centaur-tabs-backward)
  (define-key evil-normal-state-map (kbd "g t") 'centaur-tabs-forward)
  ;; Lets you have a little bar on the tab
  (setq centaur-tabs-style "bar")
  ;; (setq centaur-tabs-set-bar 'left)
  ;; Show an icon that's related to the content in the tab
  (setq centaur-tabs-set-icons t)
  ;; Set the height of the tab
  (setq centaur-tabs-height 25)
  ;; Create new tab
  (global-set-key (kbd "C-*") 'centaur-tabs--create-new-tab)
#+end_src

** Dashboard
A sweet-looking dashboard on startup.

#+begin_src emacs-lisp
  (use-package dashboard :straight t)
  (dashboard-setup-startup-hook)
  ;; Set the title
  (setq dashboard-banner-logo-title "Welcome to GNU Emacs.")
  ;; Set the banner
  (setq dashboard-startup-banner "~/.emacs.d/logo.png")
  ;; Content is not centered by default. To center, set
  (setq dashboard-center-content t)
  ;; To disable shortcut "jump" indicators for each section, set
  (setq dashboard-show-shortcuts nil)
  ;; Footer
  (setq dashboard-set-footer nil)
  ;; Items
  (setq dashboard-items '((recents  . 10)))
  ;; Icons
  (setq dashboard-set-file-icons t)
#+end_src

** Show time and CPU temps
Displays the time and CPU temperature in the modeline.

#+begin_src emacs-lisp
  (display-time-mode 1)
  (use-package emacs-cpu-temperature
  :straight (:host github :repo "zhenhua-wang/emacs-cpu-temperature")
  :config
  (setq cpu-temperature-update-interval 1
        cpu-temperature-termal-zone-type "x86_pkg_temp"
        cpu-temperature-termal-zone-path "/sys/class/thermal/")
  (cpu-temperature-mode 1))
  (add-to-list 'global-mode-string 'cpu-temperature-string t)
#+end_src

** Company
A sweet in-buffer completion package.

#+begin_src emacs-lisp
  (use-package company)
  (company-mode 1)
#+end_src
