#+title: My Emacs Configuration File
#+author: Matthew Julies

* System Setup

** Define the custom file
Some settings, when set in Emacs, will be stored in this file. Usually the settings go into init.el, but it makes it looks untidy.

#+begin_src elisp
  ;; Create custom.el in the emacs directory
  (setq custom-file (expand-file-name "custom.el" user-emacs-directory))
  ;; If custom.el exists, load it
  (when (file-exists-p custom-file)
      (load custom-file))
#+end_src

** Prettify Emacs
Some native emacs settings to make it look a little more tolerable.

#+begin_src elisp
  ;; Don't show the default emacs startup page
  (setq inhibit-startup-message t)
  ;; Hide the menu bar
  (menu-bar-mode -1)
  ;; Hide the scroll bar
  (scroll-bar-mode -1)
  ;; Hide the tool bar
  (tool-bar-mode -1)
#+end_src

** Change 'yes or now' to 'y or n'
Why the hell do you need to type 2 extra letters when I can just type 1!?!?

#+begin_src elisp
  (defalias 'yes-or-no-p 'y-or-n-p)
#+end_src

** Auto-indent org files
The bullet points are too close to the edge, so this adds a margin.

#+begin_src elisp
  (with-eval-after-load 'org       
    (setq org-startup-indented t)
  ;; Also enable visual-line-mode when opening an org-mode file
  (add-hook 'org-mode-hook #'visual-line-mode))
#+end_src

** Autopair
Automatically inserts an extra bracket or quotation mark.

#+begin_src elisp
  (electric-pair-mode 1)
#+end_src

** Window divider
Adds a line between window.

#+begin_src elisp
  (window-divider-mode 1)
#+end_src

** Show line numbers in programming mode
Display line-numbers, have it align to the right, and add a space to it.

#+begin_src elisp
  ;; When using a programming major mode, enable line numbers
  (add-hook 'prog-mode-hook 'linum-mode)
  ;; Increase gap
  (custom-set-variables '(linum-format 'dynamic))
  (defadvice linum-update-window (around linum-dynamic activate)
    (let* ((w (length (number-to-string
                       (count-lines (point-min) (point-max)))))
           (linum-format (concat "%" (number-to-string w) "d ")))
      ad-do-it))
#+end_src

** Keymaps
Some custom keymaps to make life easier.

#+begin_src elisp
  (global-set-key (kbd "C-k") 'kill-this-buffer)
#+end_src

** Show time and CPU temps
Displays the time and CPU temperature in the modeline.

#+begin_src elisp
  (display-time-mode 1)
  (use-package emacs-cpu-temperature
  :straight (:host github :repo "zhenhua-wang/emacs-cpu-temperature")
  :config
  (setq cpu-temperature-update-interval 1
        cpu-temperature-termal-zone-type "x86_pkg_temp"
        cpu-temperature-termal-zone-path "/sys/class/thermal/")
  (cpu-temperature-mode 1))
  (add-to-list 'global-mode-string 'cpu-temperature-string t)
#+end_src

* Packages

** Org-mode
org-mode, because org-mode.

#+begin_src elisp
  (use-package org :straight t)
  ;; Make org-mode fabulous
  (setq org-hide-emphasis-markers t)
  (font-lock-add-keywords 'org-mode
                          '(("^ *\\([-]\\) "
                             (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "â€¢"))))))
  ;; Show them sweet bullet points
  (use-package org-bullets :straight t
    :config
    (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
#+end_src

** Helm
Not entirely sure what Helm does, but it makes M-x look nice. Vertico is better, but haven't figured out the fuzzy searching.

#+begin_src elisp
  (use-package helm
  :config
  ;; Most of Emacs prompts become helm-enabled
  (helm-mode 1)
  ;; Helm resizes according to the number of candidates
  (helm-autoresize-mode 1)
  ;; List buffers ( Emacs way )
  (global-set-key (kbd "C-x b") 'helm-buffers-list)
  ;; Bookmarks menu
  (global-set-key (kbd "C-x r b") 'helm-bookmarks)
  ;; Finding files with Helm
  (global-set-key (kbd "C-x C-f") 'helm-find-files)
  ;; Use Helm for calculations
  (global-set-key (kbd "M-c") 'helm-calcul-expression)
  ;; Replaces the default isearch keybinding
  (global-set-key (kbd "C-s") 'helm-occur)
  ;; Helmized apropos interface
  (global-set-key (kbd "C-h a") 'helm-apropos)
  ;; Improved M-x menu
  (global-set-key (kbd "M-x") 'helm-M-x)
  ;; Show kill ring, pick something to paste
  (global-set-key (kbd "M-y") 'helm-show-kill-ring)  
  :straight t)

#+end_src

** Doom-Modeline
The best looking modeline out there.

#+begin_src elisp
  (use-package doom-modeline :straight t)
  (doom-modeline-mode 1) 
#+end_src

** All-the-icons
The icon font for doom-modeline. Looks ch-ching.

#+begin_src elisp
  (use-package all-the-icons :straight t)
#+end_src

** Evil-mode
Vi commands for Emacs. There's no need to be a purist, save your pinky.

#+begin_src elisp
  (setq evil-want-keybinding nil)
  (use-package evil :straight t)
  (evil-mode 1)
#+end_src

** Doom-themes
The themes that come packaged with Doom Emacs. I only use it because it's recommended if you use doom-modeline.

#+begin_src elisp
  (use-package doom-themes :straight t)
  (load-theme 'doom-solarized-dark t)
#+end_src
 
** Company
A sweet auto-complete plugin. Take some time out to customize it though, because it doesn't always work and TAB doesn't work on it.

#+begin_src elisp
  (use-package company :straight t)
  (add-hook 'after-init-hook 'global-company-mode)
#+end_src

** Read epubs with Nov
Lets you open epub files in Emacs. Some files don't work though, dunno why.

#+begin_src elisp
  (use-package nov :straight t)
  (add-to-list 'auto-mode-alist '("\\.epub\\'" . nov-mode))
#+end_src

** PDF Tools
Better than the native document viewer.

#+begin_src elisp
  (use-package pdf-tools :straight t)
  (pdf-loader-install)
#+end_src

** VTerm
Terminal emulator for emacs.

#+begin_src elisp
  (use-package vterm :straight t)
#+end_src

** Centre the cursor
Keeps the cursor in the center of the screen.

#+begin_src elisp
  (use-package centered-cursor-mode
    :config
    (global-centered-cursor-mode))
#+end_src

** Highlight Indentation Guides
Adds those cool lines when indenting.

#+begin_src elisp
  (use-package highlight-indent-guides :straight t)
  (add-hook 'prog-mode-hook 'highlight-indent-guides-mode)
  ;; Use the thin line
  (setq highlight-indent-guides-method 'character)
#+end_src

** Centaur Tabs
Tabs that look a lot better than the native ones.

#+begin_src elisp
  (use-package centaur-tabs)
  (centaur-tabs-mode 1)
  ;; Cycle through tabs with Emacs style keybindings
  (global-set-key (kbd "C-<prior>") 'centaur-tabs-backward)
  (global-set-key (kbd "C-<next>") 'centaur-tabs-forward)
  ;; Cycle through tabs with Vi style keybindings
  (define-key evil-normal-state-map (kbd "g T") 'centaur-tabs-backward)
  (define-key evil-normal-state-map (kbd "g t") 'centaur-tabs-forward)
  ;; Lets you have a little bar on the tab
  (setq centaur-tabs-style "bar")
  (setq centaur-tabs-set-bar 'left)
  ;; Show an icon that's related to the content in the tab
  (setq centaur-tabs-set-icons t)
  ;; Set the height of the tab
  (setq centaur-tabs-height 25)
  ;; Create new tab
  (global-set-key (kbd "C-*") 'centaur-tabs--create-new-tab)
#+end_src

** Dashboard
A sweet-looking dashboard on startup.

#+begin_src elisp
  (use-package dashboard)
  (dashboard-setup-startup-hook)
  ;; Set the title
  (setq dashboard-banner-logo-title "Welcome to GNU Emacs.")
  ;; Set the banner
  (setq dashboard-startup-banner "~/.emacs.d/logo.png")
  ;; Content is not centered by default. To center, set
  (setq dashboard-center-content t)
  ;; To disable shortcut "jump" indicators for each section, set
  (setq dashboard-show-shortcuts nil)
  ;; Footer
  (setq dashboard-set-footer nil)
  ;; Items
  (setq dashboard-items '((recents  . 10)))
  ;; Icons
  (setq dashboard-set-file-icons t)
#+end_src


** Emacs Multi-Media System
A funky fresh media player for emacs.

#+begin_src elisp
  (use-package emms :straight t)
  (emms-all)
  (setq emms-player-list '(emms-player-mpv))
  (setq emms-source-file-default-directory "~/Music/")
#+end_src

** Calibredb.el
A Calibre client for emacs.

#+begin_src elisp
  (use-package calibredb :straight t)
  (setq calibredb-root-dir "~/Documents/Calibre Library")
  (setq calibredb-db-dir (expand-file-name "metadata.db" calibredb-root-dir))
#+end_src

** W3M
A web browser for Emacs.

#+begin_src elisp
  (use-package w3m :straight t)
#+end_src

** Magit
A git interface for Emacs.

#+begin_src elisp
  (use-package magit :straight t)
#+end_src

** Evil Collection
Not sure what this does, probably gives evil bindings for some packages.

#+begin_src elisp
  (use-package evil-collection
    :ensure t
    :after evil
    :init
  (evil-collection-init))
#+end_src
